definitions:
  models.AppointmentResponse:
    properties:
      end_time:
        type: string
      id:
        type: integer
      patient_id:
        type: integer
      patient_name:
        type: string
      professional_id:
        type: integer
      professional_name:
        type: string
      start_time:
        type: string
      status:
        type: string
    type: object
  models.CreateAppointmentRequest:
    properties:
      end_time:
        type: string
      professional_id:
        type: integer
      start_time:
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.ProfessionalProfile:
    type: object
  models.ProfessionalProfileResponse:
    properties:
      address:
        type: string
      available_days_of_week:
        items:
          type: string
        type: array
      bio:
        type: string
      category:
        type: string
      cep:
        type: string
      city:
        type: string
      email:
        type: string
      end_hour:
        type: string
      id:
        type: integer
      num_reviews:
        type: integer
      only_online:
        type: boolean
      only_presential:
        type: boolean
      phone:
        type: string
      price:
        type: number
      profissional_identification:
        type: string
      rating:
        type: number
      services:
        type: string
      start_hour:
        type: string
      tags:
        items:
          type: string
        type: array
      uf:
        type: string
      unavailable_dates:
        items:
          $ref: '#/definitions/models.UnavailableDate'
        type: array
      user_id:
        type: integer
      user_name:
        type: string
    type: object
  models.UnavailableDate:
    properties:
      date:
        type: string
      id:
        type: integer
      profileID:
        type: integer
      reason:
        type: string
    type: object
  models.UpdateAppointmentRequest:
    properties:
      end_time:
        type: string
      start_time:
        type: string
      status:
        type: string
    type: object
  models.UserResponse:
    properties:
      address:
        type: string
      cep:
        type: string
      city:
        type: string
      cpf:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      role:
        type: string
      uf:
        type: string
    type: object
  models.UserUpdateRequest:
    properties:
      address:
        type: string
      cep:
        type: string
      city:
        type: string
      cpf:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      role:
        type: string
      uf:
        type: string
    type: object
info:
  contact: {}
paths:
  /appointments:
    post:
      consumes:
      - application/json
      parameters:
      - description: Dados do agendamento
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CreateAppointmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AppointmentResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cria um novo agendamento
      tags:
      - appointment
  /appointments/{id}:
    delete:
      parameters:
      - description: ID do agendamento
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove um agendamento
      tags:
      - appointment
    put:
      consumes:
      - application/json
      parameters:
      - description: ID do agendamento
        in: path
        name: id
        required: true
        type: integer
      - description: Novos dados do agendamento
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UpdateAppointmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AppointmentResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Atualiza um agendamento
      tags:
      - appointment
  /appointments/my:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AppointmentResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Lista agendamentos do paciente logado
      tags:
      - appointment
  /appointments/professional/{id}:
    get:
      parameters:
      - description: ID do profissional
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AppointmentResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Lista agendamentos de um profissional
      tags:
      - appointment
  /auth/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Autentica o usuário e retorna o token JWT
      parameters:
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Senha
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Login de usuário
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Cria um novo usuário no sistema (profissional já cria perfil)
      parameters:
      - description: Nome
        in: formData
        name: name
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Senha
        in: formData
        name: password
        required: true
        type: string
      - description: Role (patient/professional)
        enum:
        - patient
        - professional
        in: formData
        name: role
        required: true
        type: string
      - description: CPF
        in: formData
        name: cpf
        required: true
        type: string
      - description: Telefone
        in: formData
        name: phone
        type: string
      - description: CEP
        in: formData
        name: cep
        type: string
      - description: UF
        in: formData
        name: uf
        type: string
      - description: Cidade
        in: formData
        name: city
        type: string
      - description: Endereço
        in: formData
        name: address
        type: string
      - description: credencial do profissional (se profissional)
        in: formData
        name: credencial
        type: string
      - description: Categoria profissional (se profissional)
        enum:
        - nutritionist
        - personal_trainer
        - physician
        - psychologist
        - physiotherapist
        - occupational_therapy
        - elderly_care
        - doctor
        in: formData
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Cadastro de usuário
      tags:
      - auth
  /professional/list:
    get:
      parameters:
      - description: Categoria do profissional
        in: query
        name: category
        type: string
      - description: Nome do profissional
        in: query
        name: name
        type: string
      - description: Tags separadas por vírgula
        in: query
        name: tags
        type: string
      - description: Apenas online
        in: query
        name: only_online
        type: boolean
      - description: Apenas presencial
        in: query
        name: only_presential
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProfessionalProfileResponse'
            type: array
      summary: Lista perfis profissionais com filtros
      tags:
      - professional
  /professional/profile:
    post:
      consumes:
      - application/json
      parameters:
      - description: Dados do perfil profissional (inclui dias e horários de atendimento)
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ProfessionalProfile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfessionalProfileResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cria perfil profissional
      tags:
      - professional
  /professional/profile/{id}:
    delete:
      parameters:
      - description: ID do perfil profissional
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove perfil profissional (owner only)
      tags:
      - professional
    get:
      parameters:
      - description: ID do perfil profissional
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfessionalProfileResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Busca perfil profissional pelo profileID
      tags:
      - professional
    put:
      consumes:
      - application/json
      parameters:
      - description: ID do perfil profissional
        in: path
        name: id
        required: true
        type: integer
      - description: Novos dados do perfil (inclui dias e horários de atendimento)
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ProfessionalProfile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfessionalProfileResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Edita perfil profissional (owner only)
      tags:
      - professional
  /professional/profile/user/{user_id}:
    get:
      parameters:
      - description: ID do usuário
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfessionalProfileResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Busca perfil profissional pelo userID
      tags:
      - professional
  /user:
    get:
      description: Retorna a lista de todos os usuários cadastrados (admin futuramente)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Listar todos os usuários
      tags:
      - user
  /user/{id}:
    get:
      description: Retorna dados de um usuário específico (próprio usuário ou admin
        futuramente)
      parameters:
      - description: ID do usuário
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Buscar usuário por ID
      tags:
      - user
  /user/me:
    delete:
      description: Remove o próprio usuário autenticado do sistema
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Deletar o próprio usuário
      tags:
      - user
    get:
      description: Retorna dados do próprio usuário (me)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Pegar informações do usuário autenticado
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Permite atualizar informações pessoais do próprio usuário
      parameters:
      - description: Novos dados do usuário
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Atualizar dados do próprio usuário
      tags:
      - user
swagger: "2.0"
