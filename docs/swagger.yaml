definitions:
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.ProfessionalProfile:
    type: object
  models.ProfessionalProfileResponse:
    properties:
      bio:
        type: string
      category:
        type: string
      id:
        type: integer
      num_reviews:
        type: integer
      only_online:
        type: boolean
      only_presential:
        type: boolean
      price:
        type: number
      rating:
        type: number
      services:
        type: string
      tags:
        items:
          type: string
        type: array
      user_id:
        type: integer
    type: object
  models.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
    type: object
  models.UserUpdateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
info:
  contact: {}
  description: Documentação da API vittaAqui
  title: vittaAqui API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Autentica o usuário e retorna o token JWT
      parameters:
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Senha
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      summary: Login de usuário
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Cria um novo usuário no sistema (profissional já cria perfil)
      parameters:
      - description: Nome
        in: formData
        name: name
        required: true
        type: string
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Senha
        in: formData
        name: password
        required: true
        type: string
      - description: Role (patient/professional)
        in: formData
        name: role
        required: true
        type: string
      - description: Bio do profissional (se profissional)
        in: formData
        name: bio
        type: string
      - description: Categoria profissional (se profissional)
        in: formData
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Cadastro de usuário
      tags:
      - auth
  /professional/list:
    get:
      parameters:
      - description: Categoria do profissional
        in: query
        name: category
        type: string
      - description: Nome do profissional
        in: query
        name: name
        type: string
      - description: Tags separadas por vírgula
        in: query
        name: tags
        type: string
      - description: Apenas online
        in: query
        name: only_online
        type: boolean
      - description: Apenas presencial
        in: query
        name: only_presential
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ProfessionalProfileResponse'
            type: array
      summary: Lista perfis profissionais com filtros
      tags:
      - professional
  /professional/profile:
    post:
      consumes:
      - application/json
      parameters:
      - description: Dados do perfil profissional
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ProfessionalProfile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfessionalProfileResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cria perfil profissional
      tags:
      - professional
  /professional/profile/{id}:
    delete:
      parameters:
      - description: ID do perfil profissional
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove perfil profissional (owner only)
      tags:
      - professional
    get:
      parameters:
      - description: ID do perfil profissional
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfessionalProfileResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Busca perfil profissional pelo profileID
      tags:
      - professional
    put:
      consumes:
      - application/json
      parameters:
      - description: ID do perfil profissional
        in: path
        name: id
        required: true
        type: integer
      - description: Novos dados do perfil
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ProfessionalProfile'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfessionalProfileResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Edita perfil profissional (owner only)
      tags:
      - professional
  /professional/profile/user/{user_id}:
    get:
      parameters:
      - description: ID do usuário
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfessionalProfileResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      summary: Busca perfil profissional pelo userID
      tags:
      - professional
  /user:
    get:
      consumes:
      - application/json
      description: Retorna todos os usuários cadastrados (acesso restrito)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Listar todos os usuários (admin)
      tags:
      - user
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Retorna dados de um usuário específico (acesso restrito)
      parameters:
      - description: ID do usuário
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Buscar usuário por ID (admin)
      tags:
      - user
  /user/me:
    delete:
      consumes:
      - application/json
      description: Remove o próprio usuário autenticado
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Deletar o próprio usuário
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Retorna dados do próprio usuário (me)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Pegar informações do usuário autenticado
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Atualiza dados do próprio usuário
      parameters:
      - description: Novos dados
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Atualizar usuário autenticado
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
